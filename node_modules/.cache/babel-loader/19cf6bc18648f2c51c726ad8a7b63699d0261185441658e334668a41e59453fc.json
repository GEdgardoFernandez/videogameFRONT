{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bff08\\\\Desktop\\\\PI-Videogames-main\\\\client\\\\src\\\\components\\\\GamesCards\\\\GamesCards.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport style from './GamesCards.module.css';\nimport CardGame from '../CardGame/CardGame';\nimport { useLocation } from 'react-router-dom';\nimport Pagination from '../Pagination/Pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesCards(param) {\n  _s();\n  const [games, setGames] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const location = useLocation();\n  const [totalPages, setTotalPages] = useState(gamesPerPage * 100);\n  const gamesPerPage = 20;\n  const offset = (currentPage - 1) * gamesPerPage;\n  const handlePageChange = pageNumber => {\n    // Verificar si el número de página está dentro del rango válido\n    if (pageNumber >= 1 && pageNumber <= totalPages) {\n      // Actualizar el estado de la página actual\n      setCurrentPage(pageNumber);\n    }\n  };\n  useEffect(() => {\n    const fetchGames = async () => {\n      try {\n        const response = await axios.get(`/videogames?page=${currentPage}&pageSize=${gamesPerPage}`);\n        setGames(response.data);\n      } catch (error) {\n        console.error('Error fetching games:', error);\n      }\n    };\n    fetchGames();\n  }, [location.pathname, currentPage]); // Agrega currentPage a las dependencias para que se vuelva a cargar cuando cambie\n\n  const nextPage = () => {\n    setCurrentPage(currentPage + 1);\n  };\n  const prevPage = () => {\n    setCurrentPage(currentPage - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.containerCards,\n      children: games.map(param => /*#__PURE__*/_jsxDEV(CardGame, {\n        name: param.name,\n        image: param.background_image,\n        genre: param.genres.map(genre => genre.name)\n      }, param.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(GamesCards, \"quxAYhHRPcJYaFZ3GLcjZKqU3bk=\", false, function () {\n  return [useLocation];\n});\n_c = GamesCards;\nvar _c;\n$RefreshReg$(_c, \"GamesCards\");","map":{"version":3,"names":["useEffect","useState","axios","style","CardGame","useLocation","Pagination","jsxDEV","_jsxDEV","GamesCards","param","_s","games","setGames","currentPage","setCurrentPage","location","totalPages","setTotalPages","gamesPerPage","offset","handlePageChange","pageNumber","fetchGames","response","get","data","error","console","pathname","nextPage","prevPage","children","className","containerCards","map","name","image","background_image","genre","genres","key","fileName","_jsxFileName","lineNumber","columnNumber","onPageChange","_c","$RefreshReg$"],"sources":["C:/Users/bff08/Desktop/PI-Videogames-main/client/src/components/GamesCards/GamesCards.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport style from './GamesCards.module.css';\r\nimport CardGame from '../CardGame/CardGame';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Pagination from '../Pagination/Pagination';\r\n\r\nexport default function GamesCards(param) {\r\n  const [games, setGames] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const location = useLocation();\r\n  const [totalPages, setTotalPages] = useState(gamesPerPage*100);\r\n  const gamesPerPage = 20;\r\n  const offset = (currentPage - 1) * gamesPerPage;\r\n  const handlePageChange = (pageNumber) => {\r\n  // Verificar si el número de página está dentro del rango válido\r\n  if (pageNumber >= 1 && pageNumber <= totalPages) {\r\n    // Actualizar el estado de la página actual\r\n    setCurrentPage(pageNumber);\r\n  }\r\n  };\r\n  useEffect(() => {\r\n    const fetchGames = async () => {\r\n      try {\r\n        const response = await axios.get(`/videogames?page=${currentPage}&pageSize=${gamesPerPage}`);\r\n        setGames(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching games:', error);\r\n      }\r\n    };\r\n    fetchGames();\r\n  }, [location.pathname, currentPage]); // Agrega currentPage a las dependencias para que se vuelva a cargar cuando cambie\r\n\r\n  const nextPage = () => {\r\n    setCurrentPage(currentPage + 1);\r\n  };\r\n  \r\n  const prevPage = () => {\r\n    setCurrentPage(currentPage - 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={style.containerCards}>\r\n        {games.map((param) => (\r\n          <CardGame\r\n            key={param.key}\r\n            name={param.name}\r\n            image={param.background_image}\r\n            genre={param.genres.map((genre) => genre.name)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={handlePageChange} />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}