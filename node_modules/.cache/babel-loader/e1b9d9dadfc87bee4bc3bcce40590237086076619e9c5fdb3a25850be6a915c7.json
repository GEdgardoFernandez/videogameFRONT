{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bff08\\\\Desktop\\\\PI-Videogames-main\\\\client\\\\src\\\\components\\\\GamesCards\\\\GamesCards.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport style from './GamesCards.module.css';\nimport CardGame from '../CardGame/CardGame';\nimport { useLocation } from 'react-router-dom';\nimport Pagination from '../Pagination/Pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesCards(param) {\n  _s();\n  const [games, setGames] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const location = useLocation();\n  const [totalPages, setTotalPages] = useState(1);\n  const gamesPerPage = 20;\n  const handlePageChange = pageNumber => {\n    // Lógica para manejar el cambio de página\n    setCurrentPage(pageNumber);\n  };\n  useEffect(() => {\n    const fetchGames = async () => {\n      try {\n        let url = '';\n        if (location.pathname === '/home') {\n          url = `http://localhost:3001/videogames?page=${currentPage}&pageSize=20`; // Agrega los parámetros de paginación\n        } else if (location.pathname === '/genres') {\n          url = `http://localhost:3001/genres?page=${currentPage}&pageSize=20`; // Agrega los parámetros de paginación\n        }\n        const response = await axios.get(url);\n        const games = response.data;\n        setGames(games);\n      } catch (error) {\n        console.error('Error fetching games:', error);\n      }\n    };\n    fetchGames();\n  }, [location.pathname, currentPage]); // Agrega currentPage a las dependencias para que se vuelva a cargar cuando cambie\n\n  const nextPage = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n  const prevPage = () => {\n    setCurrentPage(prevPage => prevPage - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.containerCards,\n      children: games.map(param => /*#__PURE__*/_jsxDEV(CardGame, {\n        name: param.name,\n        image: param.background_image,\n        genre: param.genres.map(genre => genre.name)\n      }, param.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(GamesCards, \"8VWWWH6euegpDnzOrmcvVZCwERk=\", false, function () {\n  return [useLocation];\n});\n_c = GamesCards;\nvar _c;\n$RefreshReg$(_c, \"GamesCards\");","map":{"version":3,"names":["useEffect","useState","axios","style","CardGame","useLocation","Pagination","jsxDEV","_jsxDEV","GamesCards","param","_s","games","setGames","currentPage","setCurrentPage","location","totalPages","setTotalPages","gamesPerPage","handlePageChange","pageNumber","fetchGames","url","pathname","response","get","data","error","console","nextPage","prevPage","children","className","containerCards","map","name","image","background_image","genre","genres","key","fileName","_jsxFileName","lineNumber","columnNumber","onPageChange","_c","$RefreshReg$"],"sources":["C:/Users/bff08/Desktop/PI-Videogames-main/client/src/components/GamesCards/GamesCards.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport style from './GamesCards.module.css';\r\nimport CardGame from '../CardGame/CardGame';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Pagination from '../Pagination/Pagination';\r\n\r\nexport default function GamesCards(param) {\r\n  const [games, setGames] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const location = useLocation();\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const gamesPerPage = 20;\r\n  const handlePageChange = (pageNumber) => {\r\n    // Lógica para manejar el cambio de página\r\n    setCurrentPage(pageNumber);\r\n  };\r\n  useEffect(() => {\r\n    const fetchGames = async () => {\r\n      try {\r\n        let url = '';\r\n        if (location.pathname === '/home') {\r\n          url = `http://localhost:3001/videogames?page=${currentPage}&pageSize=20`; // Agrega los parámetros de paginación\r\n        } else if (location.pathname === '/genres') {\r\n          url = `http://localhost:3001/genres?page=${currentPage}&pageSize=20`; // Agrega los parámetros de paginación\r\n        }\r\n        const response = await axios.get(url);\r\n        const games = response.data;\r\n        setGames(games);\r\n      } catch (error) {\r\n        console.error('Error fetching games:', error);\r\n      }\r\n    };\r\n    fetchGames();\r\n  }, [location.pathname, currentPage]); // Agrega currentPage a las dependencias para que se vuelva a cargar cuando cambie\r\n\r\n  const nextPage = () => {\r\n    setCurrentPage((prevPage) => prevPage + 1);\r\n  };\r\n\r\n  const prevPage = () => {\r\n    setCurrentPage((prevPage) => prevPage - 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={style.containerCards}>\r\n        {games.map((param) => (\r\n          <CardGame\r\n            key={param.key}\r\n            name={param.name}\r\n            image={param.background_image}\r\n            genre={param.genres.map((genre) => genre.name)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={handlePageChange} />\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,yBAAyB;AAC3C,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,eAAe,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACxC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMe,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAMkB,YAAY,GAAG,EAAE;EACvB,MAAMC,gBAAgB,GAAIC,UAAU,IAAK;IACvC;IACAN,cAAc,CAACM,UAAU,CAAC;EAC5B,CAAC;EACDrB,SAAS,CAAC,MAAM;IACd,MAAMsB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,IAAIC,GAAG,GAAG,EAAE;QACZ,IAAIP,QAAQ,CAACQ,QAAQ,KAAK,OAAO,EAAE;UACjCD,GAAG,GAAI,yCAAwCT,WAAY,cAAa,CAAC,CAAC;QAC5E,CAAC,MAAM,IAAIE,QAAQ,CAACQ,QAAQ,KAAK,SAAS,EAAE;UAC1CD,GAAG,GAAI,qCAAoCT,WAAY,cAAa,CAAC,CAAC;QACxE;QACA,MAAMW,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAACH,GAAG,CAAC;QACrC,MAAMX,KAAK,GAAGa,QAAQ,CAACE,IAAI;QAC3Bd,QAAQ,CAACD,KAAK,CAAC;MACjB,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IACDN,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACN,QAAQ,CAACQ,QAAQ,EAAEV,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEtC,MAAMgB,QAAQ,GAAGA,CAAA,KAAM;IACrBf,cAAc,CAAEgB,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMA,QAAQ,GAAGA,CAAA,KAAM;IACrBhB,cAAc,CAAEgB,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;EAC5C,CAAC;EAED,oBACEvB,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAKyB,SAAS,EAAE9B,KAAK,CAAC+B,cAAe;MAAAF,QAAA,EAClCpB,KAAK,CAACuB,GAAG,CAAEzB,KAAK,iBACfF,OAAA,CAACJ,QAAQ;QAEPgC,IAAI,EAAE1B,KAAK,CAAC0B,IAAK;QACjBC,KAAK,EAAE3B,KAAK,CAAC4B,gBAAiB;QAC9BC,KAAK,EAAE7B,KAAK,CAAC8B,MAAM,CAACL,GAAG,CAAEI,KAAK,IAAKA,KAAK,CAACH,IAAI;MAAE,GAH1C1B,KAAK,CAAC+B,GAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIf,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNrC,OAAA,CAACF,UAAU;MAACQ,WAAW,EAAEA,WAAY;MAACG,UAAU,EAAEA,UAAW;MAAC6B,YAAY,EAAE1B;IAAiB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7F,CAAC;AAEV;AAAClC,EAAA,CApDuBF,UAAU;EAAA,QAGfJ,WAAW;AAAA;AAAA0C,EAAA,GAHNtC,UAAU;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}